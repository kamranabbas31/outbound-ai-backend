type CadenceProgress {
  id: String!
  day: Int!
  attempt: Int!
  executed_at: String!
}

type Campaign {
  id: String!
  name: String!
  file_name: String
  status: String
  execution_status: String
  leads_count: Int
  completed: Int
  in_progress: Int
  remaining: Int
  failed: Int
  duration: Float
  cost: Float
  user_id: String
  created_at: String
  cadence_template: CadenceTemplate
  cadence_template_id: String
  cadence_start_date: DateTime
  cadence_stopped: Boolean
  cadence_completed: Boolean
  cadence_progress: [CadenceProgress]
}

type Lead {
  id: String!
  name: String
  phone_number: String
  phone_id: String
  status: String
  disposition: String
  duration: Float
  cost: Float
  recordingUrl: String
  created_at: String
  campaign_id: String
  initiated_at: String
}

input LeadInput {
  name: String
  phone_number: String!
  phone_id: String
  status: String
  disposition: String
  duration: Float
  cost: Float
  recordingUrl: String
  initiated: Boolean
}

input AttachCadenceInput {
  campaignId: String!
  cadenceId: String!
  startDate: DateTime
}

type CampaignResponse {
  userError: UserError
  data: Campaign
}

type CampaignListResponse {
  userError: UserError
  data: [Campaign!]
}

type LeadListResponse {
  userError: UserError
  data: [Lead!]
}

type UserError {
  message: String
}

type CampaignStats {
  completed: Int
  inProgress: Int
  remaining: Int
  failed: Int
  totalDuration: Float
  totalCost: Float
}

type CampaignStatsResponse {
  userError: UserError
  data: CampaignStats
}
type QueueResponse {
  userError: UserError
  success: Boolean
}
type CampaignLeadPaginationResult {
  userError: UserError
  totalPages: Int
  totalLeads: Int
}

type CadenceAttachResponse {
  success: Boolean
  userError: UserError
}

input UpdateCampaignInput {
  id: String!
  name: String
  file_name: String
  status: String
  leads_count: Int
  completed: Int
  in_progress: Int
  remaining: Int
  failed: Int
  duration: Float
  cost: Float
  execution_status: String
  cadence_template_id: String
  cadence_start_date: DateTime
  cadence_stopped: Boolean
  cadence_completed: Boolean
}

type UpdateCampaignResponse {
  success: Boolean!
  userError: UserError
  campaign: Campaign
}

type LeadAttempt {
  name: String
  phone: String
  status: String
  disposition: String
  duration: String
  cost: Float
  attempt: Int
}

type LeadAttemptListResponse {
  userError: UserError
  data: [LeadAttempt!]
}

type Query {
  fetchCampaigns(userId: String!): CampaignListResponse!
  fetchLeadsForCampaign(
    campaignId: String!
    skip: Int
    take: Int
    searchTerm: String
  ): LeadListResponse!
  fetchCampaignById(campaignId: ID!): CampaignResponse!
  fetchCampaignStats(campaignId: ID!): CampaignStatsResponse!
  getTotalPagesForCampaign(
    campaignId: String!
    itemsPerPage: Int
  ): CampaignLeadPaginationResult!
  fetchLeadAttempts(campaignId: String!): LeadAttemptListResponse!
}

type Mutation {
  createCampaign(campaignName: String!, userId: String!): CampaignResponse!
  addLeadsToCampaign(
    campaignId: String!
    leads: [LeadInput!]!
    cadenceId: String
    cadenceStartDate: DateTime
  ): CampaignResponse!
  enqueueCampaignJob(
    campaignId: String!
    pacingPerSecond: Int = 1
  ): QueueResponse!
  stopCampaignJob(campaignId: String!): QueueResponse!
  attachCadenceToCampaign(input: AttachCadenceInput!): CadenceAttachResponse!
  stopCadence(campaignId: String!): CadenceAttachResponse!
  updateCampaign(input: UpdateCampaignInput!): UpdateCampaignResponse!
}
